// <auto-generated />
using System.Collections.Generic;
using FishbowlSoftware.Planner.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FishbowSoftware.Planner.Migrations.SqlServer
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240225065211_Version_0004")]
    partial class Version_0004
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FishbowlSoftware.Planner.Domain.Entities.Application", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasFilter("[ClientId] IS NOT NULL");

                    b.HasIndex("ProjectId");

                    b.ToTable("Applications", (string)null);
                });

            modelBuilder.Entity("FishbowlSoftware.Planner.Domain.Entities.ApplicationObject", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ObjectType")
                        .HasColumnType("int");

                    b.Property<string>("UserStoryId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserStoryId");

                    b.ToTable("ApplicationObjects", (string)null);
                });

            modelBuilder.Entity("FishbowlSoftware.Planner.Domain.Entities.Client", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.ComplexProperty<Dictionary<string, object>>("Address", "FishbowlSoftware.Planner.Domain.Entities.Client.Address#Address", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Line1")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Line2")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Region")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ZipCode")
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasKey("Id");

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("FishbowlSoftware.Planner.Domain.Entities.Flow", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Flows", (string)null);
                });

            modelBuilder.Entity("FishbowlSoftware.Planner.Domain.Entities.Project", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionnaireId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Projects", (string)null);
                });

            modelBuilder.Entity("FishbowlSoftware.Planner.Domain.Entities.Question", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QuestionnaireId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionnaireId");

                    b.ToTable("Questions", (string)null);
                });

            modelBuilder.Entity("FishbowlSoftware.Planner.Domain.Entities.QuestionOption", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QuestionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOptions", (string)null);
                });

            modelBuilder.Entity("FishbowlSoftware.Planner.Domain.Entities.Questionnaire", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProjectId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique()
                        .HasFilter("[ProjectId] IS NOT NULL");

                    b.ToTable("Questionnaires", (string)null);
                });

            modelBuilder.Entity("FishbowlSoftware.Planner.Domain.Entities.UserStory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlowId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FlowId");

                    b.ToTable("UserStories", (string)null);
                });

            modelBuilder.Entity("FishbowlSoftware.Planner.Domain.Entities.Application", b =>
                {
                    b.HasOne("FishbowlSoftware.Planner.Domain.Entities.Client", "Client")
                        .WithOne()
                        .HasForeignKey("FishbowlSoftware.Planner.Domain.Entities.Application", "ClientId");

                    b.HasOne("FishbowlSoftware.Planner.Domain.Entities.Project", "Project")
                        .WithMany("Applications")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Client");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("FishbowlSoftware.Planner.Domain.Entities.ApplicationObject", b =>
                {
                    b.HasOne("FishbowlSoftware.Planner.Domain.Entities.UserStory", "UserStory")
                        .WithMany("ApplicationObjects")
                        .HasForeignKey("UserStoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("UserStory");
                });

            modelBuilder.Entity("FishbowlSoftware.Planner.Domain.Entities.Flow", b =>
                {
                    b.HasOne("FishbowlSoftware.Planner.Domain.Entities.Project", "Project")
                        .WithMany("Flows")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("FishbowlSoftware.Planner.Domain.Entities.Project", b =>
                {
                    b.HasOne("FishbowlSoftware.Planner.Domain.Entities.Client", "Client")
                        .WithMany("Projects")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Client");
                });

            modelBuilder.Entity("FishbowlSoftware.Planner.Domain.Entities.Question", b =>
                {
                    b.HasOne("FishbowlSoftware.Planner.Domain.Entities.Questionnaire", "Questionnaire")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionnaireId");

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("FishbowlSoftware.Planner.Domain.Entities.QuestionOption", b =>
                {
                    b.HasOne("FishbowlSoftware.Planner.Domain.Entities.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Question");
                });

            modelBuilder.Entity("FishbowlSoftware.Planner.Domain.Entities.Questionnaire", b =>
                {
                    b.HasOne("FishbowlSoftware.Planner.Domain.Entities.Project", "Project")
                        .WithOne("Questionnaire")
                        .HasForeignKey("FishbowlSoftware.Planner.Domain.Entities.Questionnaire", "ProjectId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("FishbowlSoftware.Planner.Domain.Entities.UserStory", b =>
                {
                    b.HasOne("FishbowlSoftware.Planner.Domain.Entities.Flow", "Flow")
                        .WithMany("UserStories")
                        .HasForeignKey("FlowId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Flow");
                });

            modelBuilder.Entity("FishbowlSoftware.Planner.Domain.Entities.Client", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("FishbowlSoftware.Planner.Domain.Entities.Flow", b =>
                {
                    b.Navigation("UserStories");
                });

            modelBuilder.Entity("FishbowlSoftware.Planner.Domain.Entities.Project", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Flows");

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("FishbowlSoftware.Planner.Domain.Entities.Question", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("FishbowlSoftware.Planner.Domain.Entities.Questionnaire", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("FishbowlSoftware.Planner.Domain.Entities.UserStory", b =>
                {
                    b.Navigation("ApplicationObjects");
                });
#pragma warning restore 612, 618
        }
    }
}
